<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李典金</title>
  
  <subtitle>stay hungry, stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-17T05:22:53.022Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李典金</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优雅地使用Win10</title>
    <link href="http://yoursite.com/2020/03/17/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Win10/"/>
    <id>http://yoursite.com/2020/03/17/优雅地使用Win10/</id>
    <published>2020-03-17T05:16:14.000Z</published>
    <updated>2020-03-17T05:22:53.022Z</updated>
    
    <content type="html"><![CDATA[<p>一些Win10的快捷键、功能、软件，让我们高效、优雅地完成我们的工作。</p><a id="more"></a><h1 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h1><ul><li>Win+D：显示桌面</li><li>Win+E：打开资源管理器</li><li>Win+I：打开设置界面</li><li>Win+L：锁定屏幕</li><li>Win+R：打开运行窗口</li><li>Win+P：使用投影仪时，打开投影选项</li><li>Win+S：打开Cortana搜索框</li><li>Win+W：打开白板</li><li>Ctrl+Alt+Del：打开任务管理器</li><li>Win+数字键：打开固定在任务栏的软件</li><li>Win+Tab：时间线</li><li>Win+Shift+S：截图</li><li>Win+G：屏幕录制</li><li>Win+V：打开剪贴板，单击，Ctrl+V</li><li>Win+A：通知中心</li><li>Win+X：开始右键菜单</li><li>Win+M：所有窗口最小化</li><li>Win+U：讲述人设置</li><li>Win+K：蓝牙连接</li><li>Win+，：暂时回到桌面</li><li>Win+Ctrl+D：新的虚拟桌面</li><li>Win+Ctrl+F4：删除当前虚拟桌面</li><li>Win+Ctrl+左键：切换左侧虚拟桌面</li><li>Win+Ctrl+右键：切换右侧虚拟桌面</li></ul><h1 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h1><ul><li>抖动最小化其他窗口</li><li>直接拖拽保存网页图片</li><li>Ctrl+Shift+T：恢复关闭的网页</li><li>文件夹固定到快速访问</li><li>图片批量编号，全选，重命名，“名称+(数字编号)”</li><li>放大镜，Win+“+”</li><li>Win+“.”：表情符号</li><li>Ctrl+Shift+B：编辑文档下，表情和特殊符号</li><li>Ctrl+Shift+F：文字简繁转换（使用不多的也没有必要记住）</li><li>数学输入面板，Win+R，mip</li><li>屏幕键盘：Win+Ctrl+O</li><li>管理开机自启动应用，任务管理器，启动选项卡</li></ul><h1 id="3-软件"><a href="#3-软件" class="headerlink" title="3. 软件"></a>3. 软件</h1><ul><li>照片，制作动图</li><li>Edge浏览器</li><li>画图3D，神奇选择/抠图</li><li>画图工具Win+R，mspaint</li><li>计算器Win+R，calc</li><li>便笺</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些Win10的快捷键、功能、软件，让我们高效、优雅地完成我们的工作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Win10" scheme="http://yoursite.com/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>Python中yield的next与send</title>
    <link href="http://yoursite.com/2019/11/03/Python%E4%B8%ADyield%E7%9A%84next%E4%B8%8Esend/"/>
    <id>http://yoursite.com/2019/11/03/Python中yield的next与send/</id>
    <published>2019-11-03T07:47:40.000Z</published>
    <updated>2020-03-17T04:36:32.710Z</updated>
    
    <content type="html"><![CDATA[<p>一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个生成器(generator). <code>yield</code>在生成器中有中断的功能, 因此: </p><ul><li>生成器可以传出数据, 通过调用<code>next()</code>.</li><li>通过<code>send()</code>, 可以传入数据进行计算, 并返回.</li></ul><p>本文通过2个例子, 分别讲这两个方法.</p><a id="more"></a><ul><li><em>环境: Ubuntu18.04, Python 3.6.8</em></li></ul><h1 id="1-next"><a href="#1-next" class="headerlink" title="1. next"></a>1. <code>next</code></h1><ol><li><p>先上代码和运行结果: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        result = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">f"result: <span class="subst">&#123;result&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generator = foo()</span><br><span class="line">print(next(generator))</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">10</span>)</span><br><span class="line">print(next(generator))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"><span class="number">4</span></span><br><span class="line">----------</span><br><span class="line">result: <span class="literal">None</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>下面开始分析. <code>generator = foo()</code>得到一个生成器对象. 此时<code>foo()</code>函数并未执行.</p></li><li><p>直到调用<code>next(generator)</code>, <code>foo()</code>开始执行. <code>print(&quot;hello&quot;)</code>后, 进入while循环.</p></li><li><p>先执行<code>yield 4</code>, 返回一个4, 然后产生一个<strong>中断</strong>. 此时, <strong>并未赋值给<code>result</code></strong>.</p></li><li><p>这时, 程序的输出为: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>接下来, 继续执行<code>print(&quot;-&quot; * 10)</code>, 输出<code>----------</code>.</p></li><li><p>又调用<code>next(generator)</code>, 回到<code>yield</code><strong>产生中断的地方继续执行</strong>, 即执行赋值操作.</p></li><li><p>可是, <strong>4已经被返回</strong>, 所以赋值给<code>result</code>的是<code>None</code>.</p></li><li><p>然后, 执行<code>print(f&quot;{result}&quot;)</code>.</p></li><li><p><strong>继续执行while循环</strong>, 又碰到<code>yield 4</code>, 返回4, 产生一个中断.</p></li><li><p>这时, 程序的输出为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result: <span class="literal">None</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>小结: <strong>调用next(), 是接着上一次调用next()的中断处, 继续执行</strong>.</p></li></ol><h1 id="2-send"><a href="#2-send" class="headerlink" title="2. send"></a>2. <code>send</code></h1><ol><li><p>先上代码和运行结果: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        result = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">f"result: <span class="subst">&#123;result&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generator = foo()</span><br><span class="line">print(next(generator))</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">10</span>)</span><br><span class="line">print(generator.send(<span class="number">8</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"><span class="number">4</span></span><br><span class="line">----------</span><br><span class="line">result: <span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>和上一个例子的<strong>区别</strong>, 在于最后一行<code>print(generator.send(8))</code>.</p></li><li><p>从<code>print(&quot;-&quot; * 10)</code>开始, 因为前面的代码和上一个例子一样.</p></li><li><p>接下来, 执行<code>generator.send(8)</code>. 回到<code>yield</code><strong>产生中断的地方继续执行</strong>, 即执行赋值操作.</p></li><li><p>上面已经说过, <strong>4已经被返回</strong>. 这时候, <strong><code>send()</code>传进来的<code>8</code>会被赋值给<code>result</code>变量.</strong></p></li><li><p>然后, 执行<code>print(f&quot;{result}&quot;)</code>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result: <span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p><strong>继续执行while循环</strong>, 又碰到<code>yield 4</code>, 返回4, 产生一个中断.</p></li><li><p>打印<code>4</code>, 程序结束.</p></li><li><p>小结: <code>send(value)</code>恢复执行并向生成器函数”发送”一个值. <code>value</code>参数将成为当前<code>yield</code>表达式的结果. 此外,  <code>send()</code>方法会返回生成器所产生的下一个值(这里返回4).</p></li><li><p>提示: 当调用<code>send()</code>来<strong>启动生成器</strong>时, 它必须以<code>None</code>作为调用参数, 因为这时没有可以接收值的 yield 表达式. 否则, 会报错<code>TypeError: can&#39;t send non-None value to a just-started generator</code>.</p><ul><li>上面例子中, 在<code>send()</code>前已使用<code>next()</code>启动生成器.</li></ul></li><li><p>综上, 一个函数包含<code>yield</code>关键字, 它就是一个生成器. 调用<code>next()</code>, 可以从生成器中传出数据. 而调用<code>send()</code>, 可以向生成器中传入数据. </p></li><li><p>此外, Python中协程的实现, 也是基于<code>yield</code>的原理.</p></li></ol><blockquote><p>参考链接:</p></blockquote><ol><li><a href="https://docs.python.org/zh-cn/3/reference/expressions.html?highlight=yield%20send#generator.send" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/reference/expressions.html?highlight=yield%20send#generator.send</a></li><li><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856#commentBox" target="_blank" rel="noopener">https://blog.csdn.net/mieleizhi0522/article/details/82142856#commentBox</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个函数定义中包含&lt;code&gt;yield&lt;/code&gt;关键字，那么这个函数就不再是一个普通函数，而是一个生成器(generator). &lt;code&gt;yield&lt;/code&gt;在生成器中有中断的功能, 因此: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成器可以传出数据, 通过调用&lt;code&gt;next()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;send()&lt;/code&gt;, 可以传入数据进行计算, 并返回.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文通过2个例子, 分别讲这两个方法.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>vim一键执行Python代码</title>
    <link href="http://yoursite.com/2019/10/27/vim%E4%B8%80%E9%94%AE%E6%89%A7%E8%A1%8CPython%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/10/27/vim一键执行Python代码/</id>
    <published>2019-10-27T02:22:52.000Z</published>
    <updated>2020-03-17T04:36:32.712Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu下使用VIM来编写python代码，但是每次编写代码后要退出VIM再：<code>python xxx.py</code>才可以执行代码.</p><p>在VIM的配置文件中添加一些配置，可以编写完代码后不用退出,一键执行Python代码.</p><p>本文分为4个部分:  准备工作, VIM的配置文件在哪, 修改VIM的配置文件, 一键执行Python代码.<br><a id="more"></a></p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><ul><li>系统: Ubuntu18.04</li><li>VIM: version 8.0.1453</li></ul><h1 id="2-VIM的配置文件在哪"><a href="#2-VIM的配置文件在哪" class="headerlink" title="2. VIM的配置文件在哪"></a>2. VIM的配置文件在哪</h1><ol><li><p>首先,进入VIM,执行命令<code>:version</code>.往下拉,就可以找到如下代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  system vimrc file: "$VIM/vimrc"  # 系统配置文件,更改会影响所有的用户</span><br><span class="line">    user vimrc file: "$HOME/.vimrc"  # 用户配置文件,只会影响当前用户</span><br><span class="line">2nd user vimrc file: "~/.vim/vimrc"</span><br><span class="line">     user exrc file: "$HOME/.exrc"</span><br><span class="line">      defaults file: "$VIMRUNTIME/defaults.vim"</span><br><span class="line"> fall-back for $VIM: "/usr/share/vim"</span><br></pre></td></tr></table></figure></li><li><p>接下来,修改<strong>用户配置文件</strong>.但是,Ubuntu18.04默认情况下,VIM<strong>没有</strong>用户配置文件.</p><ul><li>解决方案: 在用户目录下,手动建立<code>.vimrc</code>文件.例如,<code>vim .vimrc</code>.</li><li>提示: vimrc前有一个<strong>点</strong>.</li></ul></li><li><p>最后,简单测试一下,创建的<code>.vimrc</code>文件是否有效.</p><ul><li><p>在<code>.vimrc</code>文件中添加一行代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set number "显示行号</span><br></pre></td></tr></table></figure></li><li><p>退出VIM,再重新进入,就会看到左侧有行号标识.如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 set number "显示行号</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="3-修改VIM的配置文件"><a href="#3-修改VIM的配置文件" class="headerlink" title="3. 修改VIM的配置文件"></a>3. 修改VIM的配置文件</h1><ol><li><p>在<code>.vimrc</code>中添加:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">" F5 to run sh/python3</span><br><span class="line">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;`</span><br><span class="line">func! CompileRunGcc()</span><br><span class="line">    exec "w"</span><br><span class="line">    if &amp;filetype == 'sh'</span><br><span class="line">        :!time bash %</span><br><span class="line">    elseif &amp;filetype == 'python'</span><br><span class="line">        exec "!time python3.6 %"</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure></li><li><p>说明:</p><ul><li>F5一键执行代码,可以自定义.</li><li>一键执行shell脚本的部分,不需要可以去掉.<ul><li>需配置更多一键执行的文件类型,点击文末参考链接.</li></ul></li><li>注意: <ul><li>Python3.6改成自己对应的版本.</li><li>Ubuntu18.04默认安装Python2.7和Python3.6.</li></ul></li></ul></li></ol><h1 id="4-一键执行Python代码"><a href="#4-一键执行Python代码" class="headerlink" title="4. 一键执行Python代码"></a>4. 一键执行Python代码</h1><ol><li><p>首先,编写测试Python代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"F5 OK"</span>)</span><br></pre></td></tr></table></figure></li><li><p>接着按F5一键运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">F5 OK</span><br><span class="line"></span><br><span class="line">real0m0.081s</span><br><span class="line">user0m0.066s</span><br><span class="line">sys0m0.013s</span><br><span class="line"></span><br><span class="line">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure></li><li><p>然后按Enter回到编辑界面.十分丝滑的体验!</p></li></ol><blockquote><p>参考链接</p></blockquote><ol><li><a href="https://blog.csdn.net/diagnoa_wleng/article/details/82862237" target="_blank" rel="noopener">https://blog.csdn.net/diagnoa_wleng/article/details/82862237</a><ul><li>一键执行更多文件类型</li></ul></li><li><a href="https://www.cnblogs.com/hawkboy/articles/2991371.html" target="_blank" rel="noopener">https://www.cnblogs.com/hawkboy/articles/2991371.html</a></li><li><a href="https://blog.csdn.net/cpongo3/article/details/93853914" target="_blank" rel="noopener">https://blog.csdn.net/cpongo3/article/details/93853914</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu下使用VIM来编写python代码，但是每次编写代码后要退出VIM再：&lt;code&gt;python xxx.py&lt;/code&gt;才可以执行代码.&lt;/p&gt;
&lt;p&gt;在VIM的配置文件中添加一些配置，可以编写完代码后不用退出,一键执行Python代码.&lt;/p&gt;
&lt;p&gt;本文分为4个部分:  准备工作, VIM的配置文件在哪, 修改VIM的配置文件, 一键执行Python代码.&lt;br&gt;
    
    </summary>
    
    
      <category term="VIM" scheme="http://yoursite.com/categories/VIM/"/>
    
    
  </entry>
  
  <entry>
    <title>一本小小的红色写作书</title>
    <link href="http://yoursite.com/2019/10/18/%E4%B8%80%E6%9C%AC%E5%B0%8F%E5%B0%8F%E7%9A%84%E7%BA%A2%E8%89%B2%E5%86%99%E4%BD%9C%E4%B9%A6/"/>
    <id>http://yoursite.com/2019/10/18/一本小小的红色写作书/</id>
    <published>2019-10-18T11:58:37.000Z</published>
    <updated>2020-03-17T04:36:32.715Z</updated>
    
    <content type="html"><![CDATA[<p>读完&lt;&lt;一本小小的红色写作书&gt;&gt;,写一份读书总结.回顾一遍书本的内容,此外,也方便自己以后写作时参考.</p><p>全书共分为3大部分:结构,风格,可读性.在此框架下,又细分为20个实用的原则.</p><p>接下来,我将按照书本的大框架进行总结,写下我自己的理解,同时去掉那些不适合用到中文写作的部分,尽量做到简洁,实用.</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/lidianjin/blog_images/master/read/red_cover.jpg" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;关于结构,风格,可读性:</p><ul><li><strong>结构</strong>关乎文章组织以及表达观点的顺序；</li><li><strong>风格</strong>是写作的方式,包括如何使用恰当的例证支撑所写内容；</li><li><strong>可读性</strong>与表达方式,写作材料的视觉愉悦感和易读性等有关.</li></ul><h1 id="第1部分-emsp-结构"><a href="#第1部分-emsp-结构" class="headerlink" title="第1部分&emsp;结构"></a>第1部分&emsp;结构</h1><blockquote><p>当你说一件事情的时候,确保你说清楚了.如此,你言说的机会才合理.    —-E.B.怀特</p></blockquote><h2 id="原则1-运用”自上而下”的写作法"><a href="#原则1-运用”自上而下”的写作法" class="headerlink" title="原则1 运用”自上而下”的写作法"></a>原则1 运用”自上而下”的写作法</h2><ol><li><p>先写总结,开门见山.</p></li><li><p>结构:</p><ul><li>最重要</li><li>次重要</li><li>次重要</li><li>最不重要</li></ul></li><li><p>==举例==:</p><ul><li>较差版:<ul><li>爱丽丝,你去城区的时候能不能帮我个忙?如果你坐地铁去主街,下车后从第一个出口出地铁站,步行到十字街.在十字街和瓦因路交汇的十字路口,你会看到桑迪文具店.<u>你能去店里帮我买一包0.5mm派通牌铅笔芯吗?</u></li></ul></li><li>较优版:<ul><li>爱丽丝,你去城区的时候能不能帮我个忙?<u>我需要一包0.5mm派通牌铅笔芯.</u>去桑迪文具店最方便.你可以坐地铁到主街,下车后从第一个出口出地铁站,然后步行到十字街.这家店就在在十字街和瓦因路交汇的十字路口.</li></ul></li><li>读一篇文章,但是完全不知道内容将引向何处,这会让人抓狂.<ul><li>不针对小说等文学艺术写作.</li></ul></li></ul></li><li><p>当写作意图是解释或告知时,我们应该先总结,然后再运用细节作为支撑,不要玩”我有个秘密”的把戏.</p></li></ol><h2 id="原则2-分解事物"><a href="#原则2-分解事物" class="headerlink" title="原则2 分解事物"></a>原则2 分解事物</h2><blockquote><p>把大象放进冰箱,需要两步.一,打开冰箱门；二,把大象放进冰箱.</p></blockquote><ol><li><p>把主题分解成二到四个主要部分,然后运用引导句.通常推荐分为三个部分,<strong>但是</strong>一般不超过四个部分.</p></li><li><p>经典的”五段”写作法:</p><p><img src="https://raw.githubusercontent.com/lidianjin/blog_images/master/read/5_paragraphs_no_black_line.jpg" alt></p></li><li><p>主题句与引导句:</p><ul><li>主题句: 归纳的是文章中<strong>一个单独段落的内容</strong>.</li><li>引导句: 总结的是<strong>一整篇文章的内容</strong>.它放在文章开头以提示接下来的内容,突出将要讨论的事项及其顺序.引导句中的每一事项,在文章中的正文中应延展为至少一个独立的自然段.<ul><li>例:&emsp;我将通过详述个人和职业生涯的三个特殊的转折点,来呈现我是一个什么样的人:凭借曲棍球奖学金上大学时期,与维和部队共同度过的一年,入职伦敦一家商贸企业期间.</li></ul></li></ul></li></ol><h2 id="原则3-使用转折词"><a href="#原则3-使用转折词" class="headerlink" title="原则3 使用转折词"></a>原则3 使用转折词</h2><ol><li><p>使用转折词提示写作的方向.但是,然而之类的”转折”词被称作<strong>语言的交通灯</strong>.</p><ul><li>举例: 我在和你打招呼,<strong>但是</strong>你没有听到.</li></ul></li><li><p>转折词的四种类型:</p><p><img src="https://raw.githubusercontent.com/lidianjin/blog_images/master/read/but.jpg" alt></p></li></ol><h2 id="原则4-回顾六大基本写作结构"><a href="#原则4-回顾六大基本写作结构" class="headerlink" title="原则4 回顾六大基本写作结构"></a>原则4 回顾六大基本写作结构</h2><ol><li><p>使用六大基本写作结构,使观点的顺序安排得当.写作很大程度上是排列观点陈述的顺序并对其进行强调.</p></li><li><p>最常用的六种写作结构:</p><p>|      | 结构                     | 恰当顺序                                            | 示例                                                         |<br>| —— | ———————————— | —————————————————————————- | —————————————————————————————— |<br>| 1    | 范畴结构: A,B,C或C,B,A.  | 按任意顺序讨论事项.                                 | 我们来谈谈中国,美国和英国.                                   |<br>| 2    | 评价结构:正面和反面.     | 先讨论正面再讨论反面(或者反过来).                   | 我们来谈谈选民们的想法:支持,反对和中立                       |<br>| 3    | 时间结构:过去,现在,未来. | 先讨论先发生的事情,再讨论后来的事情.                | 我们来谈谈欧洲的经济:19世纪,20世纪以及21世纪.                |<br>| 4    | 比较结构:C&gt;B&gt;A.          | 先讨论最重要,差异最大的特征,再讨论不那么重要的特征. | 我们来比较一下本公司和竞争对手的规模,产品及客户.             |<br>| 5    | 线性结构:从X到Y再到Z.    | 按先后顺序讨论事项,从第一到最后(或者反过来).        | 我们分别从地级行政区,省级行政区和国家层面来谈谈立法.         |<br>| 6    | 因果结构:A导致B.         | 先讨论先发生的事,接着讨论后来的事件..               | 我们来谈谈全球变暖的主要原因,可能的影响,以及有关这个问题的争议. |</p></li></ol><ol><li><p>六种写作结构的样例大纲:</p><p>| 范畴结构              | 评价结构                | 时间结构              |<br>| ——————————- | ———————————- | ——————————- |<br>| 引言                  | 引言                    | 引言                  |<br>| 我们来谈谈这三个国家. | 我们来谈谈选民们的想法. | 我们来谈谈欧洲的经济. |<br>| 中国……            | 支持我们党派的人……  | 在19世纪……        |<br>| 美国……            | 反对我们党派的人……  | 在20世纪……        |<br>| 英国……            | 中立的人……          | 在21世纪……        |<br>| 结语                  | 结语                    | 结语                  |</p><p>| 比较结构                        | 线性结构                      | 因果结构                              |<br>| ———————————————- | ——————————————- | ——————————————————- |<br>| 引言                            | 引言                          | 引言                                  |<br>| 我们来比较一下本公司和竞争对手. | 我们从三个方面来谈谈立法层级. | 我们来谈谈全球变暖的成因和可能的影响. |<br>| 规模方面……                  | 地级行政区层面……          | 主要原因是……                      |<br>| 产品和服务方面……            | 省级行政区层面……          | 可能的影响有……                    |<br>| 客户和资源方面……            | 国家级层面……              | 存在的争议是……                    |<br>| 结语                            | 结语                          | 结语                                  |</p></li></ol><ol><li><p>其他常见的写作模式:</p><ul><li>问答<ul><li>举例:<ul><li>问:到一个国家旅游的最佳方式是什么?</li><li>答:只拍下照片,只留下脚印.</li></ul></li></ul></li><li>问题与对策<ul><li>举例:<ul><li>问题:如何应对员工流失率过高?</li><li>对策:加大招聘力度；建立内部培训项目；由公司出资,每周五发起快乐周五活动.</li></ul></li></ul></li></ul></li></ol><h2 id="原则5-整合相似事物"><a href="#原则5-整合相似事物" class="headerlink" title="原则5 整合相似事物"></a>原则5 整合相似事物</h2><ol><li><p>先结束一个主题的讨论,再接着讨论其他主题.</p><blockquote><p>想像一下你去动物园观光,结果发现所有的动物全关在一个笼子里.这对动物而言不仅甚为危险,观光者也几乎不可能将所有动物看得真切.</p></blockquote></li><li><p>举例:</p><blockquote><p> 大脑有两个不同的半球,但是功能部分交叠.大脑的左右半球各自擅长截然不同的思维处理方式.基本说来,左脑善于分析,而右脑善于创造.<br>  大脑左侧负责分析,时间,语言和理性思维.左脑思维被称为”聚光”思维.平衡收支,记忆日期或者设定目标任务时,人们依赖的是左脑.由于大部分西方思维概念来自希腊逻辑学,它是一种线性逻辑系统,因此在西方教育体系中,左脑训练最受鼓励.<br>  右脑是整体的,想象的,非语言的和艺术的.右脑思维被称为”泛光”思维.每当人们回忆起一个人的长相,专注于交响乐或者单纯地白日做梦时,使用的是右脑功能.右脑的训练在学校中不常被鼓励,这一点令许多人感到失望.</p></blockquote></li></ol><ol><li><p>分析: </p><ul><li>上面的三段结构也十分经典: <ul><li>引言后面紧接着两个自然段,每一段分别详述左脑和右脑思维.</li><li><strong>此外</strong>,在每一段中,前两句分别描述左脑或右脑思维,<strong>紧接着</strong>用第三句支撑(例证).</li><li><strong>最后</strong>是总结,分别突出左脑或右脑的发展结果.</li></ul></li></ul></li></ol><h1 id="第2部分-emsp-风格"><a href="#第2部分-emsp-风格" class="headerlink" title="第2部分&emsp;风格"></a>第2部分&emsp;风格</h1><blockquote><p>简短地展现以便他们阅读,清楚地展现以便他们欣赏,如画般地展现以便他们记忆,最重要的是,准确地展现以便他们被它的光明所指引.    —-约瑟夫᛫普利策</p></blockquote><h2 id="原则6-支撑所说内容"><a href="#原则6-支撑所说内容" class="headerlink" title="原则6 支撑所说内容"></a>原则6 支撑所说内容</h2><ol><li><p>使用<strong>准确</strong>,<strong>具体</strong>的词汇支撑所说内容.</p></li><li><p>举例:</p><ul><li><p>一般: 公司利润下降了.</p></li><li><p>较好但仍不准确:公司利润下降了,因为成本增加了.</p></li><li><p>准确:公司利润下降了10%,因为总体成本增加了20%.</p></li><li><p>更优:公司利润下降了10%,因为总体成本增加了20%.具体来说,较高的薪水支出是成本增加的主要原因.高薪资成本主要是管理层薪资增加造成的,因为加班时间减少,付给工厂员工的平均工资实际上下降了5%.</p></li></ul></li></ol><ol><li>当人们读完一篇文章后,能长时间记住的往往是其中的<strong>事例和细节</strong>.</li><li>模糊的语言会弱化文章主题,因为它迫使读者猜测你要表达的含义,而无法完全专注于你的观点.选择准确,描述性的词汇会使文章更有力.</li><li>有时,为了准确和具体,你必须使用比平常更多的词语,这无伤大雅.砍掉多余词语,保持简洁固然重要,<strong>但是</strong>充分论证所说的内容更重要.</li></ol><h2 id="原则7-让你的例证个性化"><a href="#原则7-让你的例证个性化" class="headerlink" title="原则7 让你的例证个性化"></a>原则7 让你的例证个性化</h2><ol><li>增加个性化的例子,使文章更难忘.</li><li>个性化的例子通常与”我”的使用紧密相连.不要害怕使用”我”,它会迫使读者以个性化和准确化的方式与所述话题相关联.<strong>此外</strong>,读者乐意通过个人经历来了解某一情景如何,并与作者发生联系.此时,作者的个人经历会显得更加<strong>真实</strong>,<strong>生动</strong>.</li><li>举例:<ul><li>陈述:我具有分析能力.</li><li>一般支撑论点:分析能力帮助我在阅读和理解财务报告是更好地处理数字.分析能力是良好决断力的客观标准和基础.</li><li>详细支撑论点:在AK的工作帮助我形成了良好的分析习惯.我学会了协调口头描述和财务实际.当客户说他/她们的问题在于高成本时,我会将总成本系统地分解成独立组成部分.一旦我知道数字所指内容,就会寻找这些数字背后的详细情况.其实有时候问题不在于客户以为的高成本,而在于总体系统中的另一个因素.</li></ul></li><li><p>工具:</p><ul><li><p>事例:</p><ul><li>如: 我在今年暑假完成了生产实习.</li></ul></li><li><p>数据:</p><ul><li>如: 生产实习为期10天,每天从上午8点持续到下午5点.</li></ul></li><li><p>轶事:</p><ul><li><p>轶事是修饰观点的小故事.</p></li><li><p>例如,假设你正在写”为何我们要走自己的路,而不应过多被他人的建议所左右”.你写道:</p><blockquote><p> 这种情况令我想起了一位年轻小提琴家的故事.<br>  这位小提琴家对自己能否继续演奏小提琴的才能心存疑虑,不知道自己有朝一日能否实现成为艺术大师的宏伟目标,为此她心事重重.<br>  一次她有幸与一位大师级的小提琴家相遇,年轻的小姑娘问:”您是否愿意听我演奏一曲,然后告诉我,我有没有成为艺术大师的才能?”<br>  大师回应道:”如果我听了你的演奏,然后告诉你不具备这项才能,你会怎么做?”<br>  小姑娘回答:”我非常看重您的评价,因此我不会再表演.”<br>  大师说:”如果你会因为我所说的而放弃,那么你显然不具备成为艺术大师所需的条件.”</p></blockquote></li></ul></li><li><p>引用:</p><ul><li><p>如: </p><blockquote><p>天生我材必有用.</p></blockquote></li><li><p>不幸的是,从记忆中回忆起适合的引用并不总是那么容易.引语选集书籍或在线引语档案或许可以帮到你的忙.</p></li></ul></li><li><p>类比:</p><ul><li>类比是寻找两种完全不同事物的相似性,从而帮助读者更清楚地理解给定关系.</li><li>如: 生成部门生产子弹,营销部门瞄枪,销售部门扣动扳机.<ul><li>很形象地强调了生产部门与销售,营销部门之间的关系.</li></ul></li></ul></li><li><p>明喻和暗喻:</p><ul><li>如: 这风景美如画,我简直不敢看.(明喻)</li><li>如: 他有钢铁般的勇气.(暗喻)</li></ul></li></ul></li></ol><h2 id="原则8-保持简洁"><a href="#原则8-保持简洁" class="headerlink" title="原则8 保持简洁"></a>原则8 保持简洁</h2><ol><li>用简单的词语表达你的观点.</li><li>举例:<ul><li>在英语中: demonstrate—&gt;show(展示)；</li><li>在汉语中: 我们可以用<strong>较熟悉的词</strong>替换较陌生的词,从而使读者更容易理解.比如,用膳—&gt;吃饭.</li></ul></li></ol><h2 id="原则9-砍断长句"><a href="#原则9-砍断长句" class="headerlink" title="原则9 砍断长句"></a>原则9 砍断长句</h2><ol><li>通过拆分长句,使文章更清晰.</li><li>最简单的方法: 就是把长句拆分成两到三个短句.<strong>但是</strong>,使用短句的关键不是所有的句子都要短,<strong>长短句相结合</strong>从而创造起伏变化的风格,也是写作艺术需要发挥作用的地方.</li><li>例句:<ul><li>原版:<ul><li>领导力—不论是在战场还是其他领域,如政治或商业—能够通过榜样或指挥产生.</li></ul></li><li>较好:<ul><li>领导力能够通过榜样或指挥产生.</li></ul></li></ul></li><li>“主题句一行原则”:<ul><li>在理想情况下,主题句的长度不应超过一行,以确保读者能迅速理解你的观点.</li></ul></li></ol><h2 id="原则10-删除不必要的词"><a href="#原则10-删除不必要的词" class="headerlink" title="原则10 删除不必要的词"></a>原则10 删除不必要的词</h2><ol><li>砍掉冗余语句,过多的限定和不必要的自指.<ul><li><strong>冗余</strong>(去掉不改变句子含义)<ul><li>没有经验的新手—&gt;新手</li><li>最后结果—&gt;结果</li></ul></li><li><strong>过多限定</strong>(偶尔使用限定词会使读者觉得你理性,<strong>但</strong>滥用则会弱化文章含义,显得你在写作时很犹豫)<ul><li>相当优秀—&gt;优秀</li><li>真正的独特—&gt;独特</li></ul></li><li><strong>不必要的自指</strong>(说明文通常没有必要提醒读者你所写的内容是你的观点)<ul><li>我觉得</li><li>在我看来</li></ul></li></ul></li></ol><h2 id="原则11-使用主动语态"><a href="#原则11-使用主动语态" class="headerlink" title="原则11 使用主动语态"></a>原则11 使用主动语态</h2><ol><li>多用主动句,少用被动句.</li><li>主动语态更以行为为导向,更直接,简练,减少了必需词汇量.<ul><li>“我爱祖国”,用了主动语态,四个字；</li><li>“祖国被我爱着”,用了被动语态,六个字,<strong>而且</strong>,读来十分别扭.</li></ul></li><li>被动语态的用法之一:<ul><li>被动:<ul><li>今天,电脑文件被清除了.(作者的意图是隐藏罪犯)</li></ul></li><li>主动:<ul><li>今天,哈里把电脑文件清除了.(作者的意图是暴露罪犯)</li></ul></li></ul></li></ol><h2 id="原则12-多用动词-少用名词"><a href="#原则12-多用动词-少用名词" class="headerlink" title="原则12 多用动词,少用名词"></a>原则12 多用动词,少用名词</h2><ol><li>不要把动词和形容词名词化.</li><li>原因:主要是因为它会使句子更长,使读者提取句子含义时更加费力.</li><li>举例:<ul><li>减少: reduce—&gt;reduction</li><li>发展: develop—&gt;development</li></ul></li><li><strong>重点:此原则不适用于中文写作!</strong></li></ol><h2 id="原则13-使用平行句式"><a href="#原则13-使用平行句式" class="headerlink" title="原则13 使用平行句式"></a>原则13 使用平行句式</h2><ol><li>用一致,平行的形式表达连串事物.</li><li>举例:<ul><li>原句: 安娜去了美国,英国,去了法国.</li><li>正确:安娜去了美国,去了英国,去了法国.</li><li>正确: 安娜去了美国,英国,法国.</li></ul></li></ol><h2 id="原则14-利用句式变化"><a href="#原则14-利用句式变化" class="headerlink" title="原则14 利用句式变化"></a>原则14 利用句式变化</h2><ol><li>变化句子长度和开头.</li><li>在写作时,大部分句子都应遵循”主-谓-宾”的句序,因为它产生的力量最强.<strong>然而</strong>,如果所有的句子都按照这种形式,文章就会变得枯燥无趣,特别是一连串的句子全部用相同的形式开头,如”我”或”我们”.</li><li>十种变换句子开头的方法:<ul><li>用主题开头(主题是句子相关的事物或人)<ul><li>顾客能告诉我们商品为什么畅销,如果我们花时间取倾听他/她们.</li></ul></li><li>用短语开头<ul><li>因此,直到现在我才发现,自己是多么可爱!</li></ul></li><li>用冠词开头<ul><li>一次慢跑,无疑是锻炼方式之一.</li></ul></li><li>用动词开头<ul><li>吃饭时别说话.</li></ul></li><li>用副词开头<ul><li>慢慢地,她来了,她带着微笑来到了我的身边.</li></ul></li><li>用形容词开头<ul><li>调皮又可爱,瑞秋是一个讨人喜欢的人.</li></ul></li><li>用关联词开头<ul><li>不仅温度很低,而且还下雨.</li></ul></li><li>(注: 删去用从句,动名词,不定时开头3个方法,因为它们并不适用于中文写作)</li></ul></li></ol><h2 id="原则15-选择恰当的语气"><a href="#原则15-选择恰当的语气" class="headerlink" title="原则15 选择恰当的语气"></a>原则15 选择恰当的语气</h2><ol><li>用积极,个性化的语气写作</li><li>积极语气与消极语气:<ul><li>消极: 商店晚上7点关门.(—&gt;用了消极动词”关门”)</li><li>积极:商店一直到晚上7点都开着.(—&gt;用了积极形容词”开着”)</li></ul></li><li>正式语气与非正式语气:(添加人称代词使文章更加非正式化和个人化)<ul><li>无代词:任何后续问题请发送到客户服务部.</li><li>有代词:如果你有任何后续问题,请联系我们客户服务部.</li></ul></li></ol><h2 id="原则16-保持文章性别中立"><a href="#原则16-保持文章性别中立" class="headerlink" title="原则16 保持文章性别中立"></a>原则16 保持文章性别中立</h2><ol><li>避免使用阳性泛指指示两种性别.</li><li>阳性泛指是说在涉及两种性别的情形时,仅使用代词”他”.</li><li>当涉及”他”或”她”时,应避免只使用”他”,而应当使用”他或她”,”他(她)”,他(她)们”.</li></ol><h1 id="第3部分-emsp-可读性"><a href="#第3部分-emsp-可读性" class="headerlink" title="第3部分&emsp;可读性"></a>第3部分&emsp;可读性</h1><blockquote><p>第一稿的愉悦源于欺骗自己它离真正的作品已经相当接近了；其后稿的愉悦源于意识到自己没有被第一稿蒙骗.   —-朱利安᛫巴恩斯</p></blockquote><h2 id="原则17-利用排版和设计"><a href="#原则17-利用排版和设计" class="headerlink" title="原则17 利用排版和设计"></a>原则17 利用排版和设计</h2><ol><li>在文字周围增加更多空间,以增强可读性.</li><li>最简单的办法:在<strong>页边和段落之间</strong>留出适当的空白.</li></ol><h2 id="原则18-运用可读性工具"><a href="#原则18-运用可读性工具" class="headerlink" title="原则18 运用可读性工具"></a>原则18 运用可读性工具</h2><ol><li>突出关键词和短语.</li><li>工具: <strong>粗体,斜体,破折号,项目编号,列举,阴影.</strong></li><li>注意: <strong>不要滥用</strong>.比如,我们通常不愿意在一个段落里同时使用粗体和斜体.</li></ol><h2 id="原则19-使用标题或提要"><a href="#原则19-使用标题或提要" class="headerlink" title="原则19 使用标题或提要"></a>原则19 使用标题或提要</h2><ol><li><p>用标题或提要拆分或归纳文章.</p></li><li><p>区别: </p><ul><li>标题的长度只有几个词语,提要则有一或两行；</li><li>标题的作用是区分章节内容,提要的主要作用则是概述或转述下文.</li></ul></li><li><p>举例:</p><ul><li><p>标题:</p><p><img src="https://raw.githubusercontent.com/lidianjin/blog_images/master/read/20191017202359.png" alt></p></li><li><p>提要:</p><p><img src="https://raw.githubusercontent.com/lidianjin/blog_images/master/read/20191017202625.png" alt></p></li></ul></li></ol><h2 id="原则20-回顾和修改文章"><a href="#原则20-回顾和修改文章" class="headerlink" title="原则20 回顾和修改文章"></a>原则20 回顾和修改文章</h2><ol><li>直到你的文章改到无可修改,否则不能说已经完成了.</li><li>通常写作过程:<ul><li>首先,把想法写下来；</li><li>其次,编写内容,增加细节,串联整篇文章并修正；</li><li>最后,重读全文,再稍加改动.(作品越长,这个过程所需的次数就越多)</li></ul></li><li>什么时候才算真正完成?<ul><li>说到写作,”完成”这个词应该加引号,因为这个过程永远不会真正完成.完成日常写作只是工作本身,<strong>但是</strong>,它可以不断完善.比如,某一天,自己又有了新的见解.再如已出版的书也可以修订和再编.</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读完&amp;lt;&amp;lt;一本小小的红色写作书&amp;gt;&amp;gt;,写一份读书总结.回顾一遍书本的内容,此外,也方便自己以后写作时参考.&lt;/p&gt;
&lt;p&gt;全书共分为3大部分:结构,风格,可读性.在此框架下,又细分为20个实用的原则.&lt;/p&gt;
&lt;p&gt;接下来,我将按照书本的大框架进行总结,写下我自己的理解,同时去掉那些不适合用到中文写作的部分,尽量做到简洁,实用.&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://yoursite.com/2019/10/06/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/10/06/欢迎来到我的博客/</id>
    <published>2019-10-05T16:47:55.000Z</published>
    <updated>2020-03-17T04:36:32.716Z</updated>
    
    <content type="html"><![CDATA[<p>众里寻他千百度。慕然回首，那人却在，灯火阑珊处。</p><p>一直想自己搭建一个博客，却没有找到简单实用的教程，直到我看到了崔庆才的文章：<a href="https://cuiqingcai.com/7625.html" target="_blank" rel="noopener">利用 GitHub + Hexo + Next 从零搭建一个博客</a>。十分感谢！</p><p>跟着教程，参考<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">Hexo官方文档</a>，一步一步把博客搭建了起来（即使它现在还不是很完善）。</p><h2 id="搭建个人博客目的"><a href="#搭建个人博客目的" class="headerlink" title="搭建个人博客目的"></a>搭建个人博客目的</h2><ol><li><strong>总结</strong>：加深对已学知识的理解；</li><li><strong>分享</strong>：拥抱开源，热爱分享，能帮到他人我真的很开心；</li><li><strong>交流</strong>：水平有限，希望大家不吝赐教；</li><li><strong>监督</strong>：定期更新博客（目前：一周一更），监督自己不断学习、思考、总结。</li></ol><a id="more"></a><h2 id="stay-hungry-stay-foolish"><a href="#stay-hungry-stay-foolish" class="headerlink" title="stay hungry, stay foolish"></a>stay hungry, stay foolish</h2><p>我的解读：</p><ul><li>stay hungry: keep thinking（终身学习，不要停止学习、思考）</li><li>stay foolish: keep it simple, stupid（透过事物的表面看到本质）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众里寻他千百度。慕然回首，那人却在，灯火阑珊处。&lt;/p&gt;
&lt;p&gt;一直想自己搭建一个博客，却没有找到简单实用的教程，直到我看到了崔庆才的文章：&lt;a href=&quot;https://cuiqingcai.com/7625.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用 GitHub + Hexo + Next 从零搭建一个博客&lt;/a&gt;。十分感谢！&lt;/p&gt;
&lt;p&gt;跟着教程，参考&lt;a href=&quot;https://hexo.io/zh-cn/docs/writing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官方文档&lt;/a&gt;，一步一步把博客搭建了起来（即使它现在还不是很完善）。&lt;/p&gt;
&lt;h2 id=&quot;搭建个人博客目的&quot;&gt;&lt;a href=&quot;#搭建个人博客目的&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客目的&quot;&gt;&lt;/a&gt;搭建个人博客目的&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;：加深对已学知识的理解；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分享&lt;/strong&gt;：拥抱开源，热爱分享，能帮到他人我真的很开心；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交流&lt;/strong&gt;：水平有限，希望大家不吝赐教；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监督&lt;/strong&gt;：定期更新博客（目前：一周一更），监督自己不断学习、思考、总结。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
